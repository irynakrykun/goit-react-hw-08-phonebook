{"version":3,"file":"static/js/343.22d349d3.chunk.js","mappings":"6OAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EACjBC,EAAe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EACpBC,EAAW,SAAAP,GAAK,OAAIA,EAAMC,SAASO,KAAnB,E,gDCAhBC,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,kNAWTE,EAASF,EAAAA,GAAAA,OAAH,mQAabG,EAAYH,EAAAA,GAAAA,EAAH,oDAIFI,EAAU,SAAC,GAAa,IAAXC,EAAU,EAAVA,KACxB,OACE,SAAC,KAAD,CAAcA,KAAMA,EAClBC,OAAQ,SAAAC,GAAO,OAAI,SAACJ,EAAD,UAAYI,GAAhB,GAEpB,EC5BKC,EAASC,EAAAA,KAAaC,MAAM,CAChCL,KAAMI,EAAAA,KAAaE,WACnBC,MAAOH,EAAAA,KAAaI,IAAI,GAAGC,IAAI,GAAGH,aAG9BI,EAAgB,CACpBV,KAAM,GACNO,MAAO,IA6DT,EA1DqB,WACnB,IAAMI,GAAWC,EAAAA,EAAAA,MACX1B,GAAW2B,EAAAA,EAAAA,IAAY7B,GAqB7B,OACE,SAAC,KAAD,CACE0B,cAAeA,EACfI,iBAAkBX,EAClBY,SAvBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACtBjB,EAAgBgB,EAAhBhB,KAAMO,EAAUS,EAAVT,MACdW,QAAQC,IAAIH,GAGV9B,EAASkC,MACP,SAAAC,GAAO,OAAIA,EAAQrB,KAAKsB,gBAAkBtB,EAAKsB,aAAxC,IAGTC,MAAM,GAAD,OAAIvB,EAAJ,4BAEId,EAASkC,MAAK,SAAAC,GAAO,OAAIA,EAAQd,QAAUA,CAAtB,IAC9BgB,MAAM,GAAD,OAAIhB,EAAJ,6BAGPI,GAASa,EAAAA,EAAAA,IAAWR,IAEpBC,IACD,EAEC,UAKE,UAACvB,EAAD,CAAW+B,aAAa,MAAxB,WACE,mBAAOC,QAAQ,OAAf,kBAEE,SAAC,KAAD,CAAOC,KAAK,OAAO3B,KAAK,UACxB,SAACD,EAAD,CAASC,KAAK,aAEhB,mBAAO0B,QAAQ,QAAf,oBAEE,SAAC,KAAD,CAAOC,KAAK,MAAM3B,KAAK,WACvB,SAACD,EAAD,CAASC,KAAK,cAEhB,SAACH,EAAD,CAAQ8B,KAAK,SAAb,6BAIP,EC7DYC,EAAYjC,EAAAA,GAAAA,MAAF,6DAIVkC,EAAQlC,EAAAA,GAAAA,MAAH,0I,UCsBlB,EAnBe,WACb,IAAMgB,GAAWC,EAAAA,EAAAA,MACXkB,GAAQjB,EAAAA,EAAAA,IAAYzB,GAO1B,OACE,+BACE,UAACwC,EAAD,oCAEE,SAACC,EAAD,CAAOF,KAAK,OAAO3B,KAAK,SAAS+B,SAVlB,SAACC,GACpB,IAAMC,EAAgBD,EAAEE,cAAcJ,MACtCnB,GAASwB,EAAAA,EAAAA,GAAUF,GAEnB,EAM6DH,MAAOA,QAIvE,ECvBYM,EAAczC,EAAAA,GAAAA,EAAH,wEAIXE,EAASF,EAAAA,GAAAA,OAAH,gTCqBnB,EAtBgB,SAAC,GAAiB,IAAf0B,EAAc,EAAdA,QACXV,GAAWC,EAAAA,EAAAA,MAEjB,OACE,iCACE,SAACwB,EAAD,UAAcf,EAAQrB,QACtB,SAACoC,EAAD,UAAcf,EAAQd,SAEtB,SAAC,EAAD,CAAQoB,KAAK,SAASU,QANL,kBAAM1B,GAAS2B,EAAAA,EAAAA,IAAcjB,EAAQkB,IAArC,EAMjB,sBAKL,EChBYC,EAAO7C,EAAAA,GAAAA,GAAH,kHAUJ8C,EAAY9C,EAAAA,GAAAA,GAAJ,8ICYrB,EAhBoB,WAClB,IAEM+C,EANe,SAACvD,EAAOE,GAAR,OACrBF,EAAME,QAAO,SAAAsD,GAAI,OAAIA,EAAK3C,KAAKsB,cAAcsB,SAASvD,EAAOiC,cAA5C,GADI,CAMGuB,EAFVhC,EAAAA,EAAAA,IAAY7B,IACX6B,EAAAA,EAAAA,IAAYzB,IAG3B,OACE,SAACoD,EAAD,UACGE,EAAgBI,KAAI,SAACH,EAAMJ,GAAP,OACnB,SAACE,EAAD,WACE,SAAC,EAAD,CAASpB,QAASsB,KADLJ,EADI,KAO1B,ECOD,EApBkB,WAChB,IAAM5B,GAAWC,EAAAA,EAAAA,MACXrB,GAAYsB,EAAAA,EAAAA,IAAYvB,GACxBG,GAAQoB,EAAAA,EAAAA,IAAYrB,GAM1B,OAJAuD,EAAAA,EAAAA,YAAU,WACRpC,GAASqC,EAAAA,EAAAA,MACV,GAAE,CAACrC,KAGF,iCACE,uCACA,SAAC,EAAD,KACA,sCACA,SAAC,EAAD,IACCpB,IAAcE,IAAS,mDACxB,SAAC,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/FormContacts/FormContacts.styled.js","components/FormContacts/FormContacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Contact/Contact.styled.js","components/Contact/Contact.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import { Form,ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const FormLabel = styled(Form)`\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 12px;\n  margin-bottom: 16px;\n  padding: 8px;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n`;\n\nexport const Button = styled.button`\n  background-color: green;\n  border: 1px solid #0926a6;\n  border-radius: 5px;\n  color: black;\n  padding: 5px 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 14px;\n  cursor: pointer;\n`;\n\nconst ErrorText = styled.p`\ncolor: red;\nfont-size: 14px`\n\nexport const FormErr = ({ name })=> {\n  return (\n    <ErrorMessage name={name}\n      render={message => <ErrorText>{message}</ErrorText>}/>\n  )\n}\n  ","import PropTypes from 'prop-types';\nimport { Formik, Field } from 'formik';\nimport * as yup from 'yup';\nimport { Button, FormLabel, FormErr } from './FormContacts.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  phone: yup.string().min(9).max(9).required(),\n});\n\nconst initialValues = {\n  name: '',\n  phone: '',\n};\n\nconst FormContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, phone } = values;\n    console.log(values);\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    } else if (contacts.find(contact => contact.phone === phone)) {\n      alert(`${phone} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormLabel autoComplete=\"off\">\n        <label htmlFor=\"name\">\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <FormErr name=\"name\" />\n        </label>\n        <label htmlFor=\"phone\">\n          Number\n          <Field type=\"tel\" name=\"phone\" />\n          <FormErr name=\"phone\" />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormLabel>\n    </Formik>\n  );\n};\n\nFormContacts.propTypes = {\n  initialValues: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  validationSchema: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default FormContacts;\n","import styled from 'styled-components';\nexport const LabelTitle= styled.label`\n  color: black;\n  font-size: 25px;\n`;\nexport const Input = styled.input`\n  border: 1px solid black;\n  border-radius: 4px;\n  padding: 1px;\n  margin-left: 15px;\n  margin-bottom: 15px;\n`;","\nimport { LabelTitle, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  const handelFilter = (e) => {\n    const searchContact = e.currentTarget.value\n    dispatch(setFilter(searchContact))\n       \n   }\n\n  return (\n    <>\n      <LabelTitle>\n        Find contacts by name\n        <Input type=\"text\" name=\"filter\" onChange={handelFilter} value={value}></Input>\n      </LabelTitle>\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Description = styled.p`\n  // margin-left: 50px;\n  margin-right: auto;\n`;\nexport const Button = styled.button`\n  background-color: blue; \n  border: 1px solid #0926a6;\n  border-radius: 10px;\n  color: black;\n  padding: 5px 10px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 14px;\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: 150px;`","import { Description, Button } from '../Contact/Contact.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <>\n      <Description>{contact.name}</Description>\n      <Description>{contact.phone}</Description>\n\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </>\n  );\n};\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Contact;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n\n   margin: 0;\n  padding: 10;\n  display: flex;\n  flex-direction:column;\n  gap: 8px;\n`;\n\n\nexport const ListItem  = styled.li`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n    padding: 5px;\n  margin-bottom: 8px;\n`;","import Contact from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { List, ListItem } from './ContactList.styled';\n\nconst filterContacts = (items, filter) =>\n  items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\n\nconst ContactList = () => {\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = filterContacts(items, filter);\n\n  return (\n    <List>\n      {visibleContacts.map((item, id) => (\n        <ListItem key={id}>\n          <Contact contact={item} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { getIsLoading, getError } from \"redux/contacts/selectors\";\nimport FormContacts from \"components/FormContacts/FormContacts\";\nimport Filter from \"components/Filter/Filter\";\nimport ContactList from \"components/ContactList/ContactList\";\n\n const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <FormContacts />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </>\n  );\n};\nexport default Contacts;"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","FormLabel","styled","Form","Button","ErrorText","FormErr","name","render","message","schema","yup","shape","required","phone","min","max","initialValues","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","console","log","find","contact","toLowerCase","alert","addContact","autoComplete","htmlFor","type","LabelTitle","Input","value","onChange","e","searchContact","currentTarget","setFilter","Description","onClick","deleteContact","id","List","ListItem","visibleContacts","item","includes","filterContacts","map","useEffect","fetchContacts"],"sourceRoot":""}