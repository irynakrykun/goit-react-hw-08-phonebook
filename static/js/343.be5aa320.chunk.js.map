{"version":3,"file":"static/js/343.be5aa320.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/FormContacts/FormContacts.styled.js","components/FormContacts/FormContacts.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/Contact/Contact.styled.js","components/Contact/Contact.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["export const getContacts = state => state.contacts.items;\nexport const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","import { Form,ErrorMessage, Field } from 'formik';\nimport styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 10px;\n  color: green;\n  text-shadow: 0.5px 0.5px 0.5px blue;\n  text-align: center;\n`;\n\nexport const Input = styled(Field)`\n  width: 320px;\n  padding: 5px;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid green;\n\n  box-shadow: 0px 1px 1px blue, 0px 1px 1px blue,\n    0px 1px 1px blue;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  margin-top: 20px;\n  color: snow;\n  text-shadow: darkslateblue 1px 1px 1px;\n  width: 150px;\n  line-height: 1.5rem;\n  background: green;\n  border: none;\n  border-radius: 7px;\n   box-shadow: 0px 1px 1px blue, 0px 1px 1px blue,\n    0px 1px 1px blue;\n  cursor: pointer;\n  transition: all 150ms ease 0s;\n  &:hover,\n  &:focus {\n    background: blue;\n    box-shadow: 2px 5px 5px darkorchid;\n  }\n`;\n\nexport const FormLabel = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n`;\n\n// export const FormLabel = styled(Form)`\n//   display: inline-flex;\n//   flex-direction: column;\n//   align-items: flex-end;\n//   gap: 12px;\n//   margin-bottom: 16px;\n//   padding: 8px;\n//   border: 1px solid #2a2a2a;\n//   border-radius: 4px;\n// `;\n\n// export const Button = styled.button`\n//   background-color: green;\n//   border: 1px solid #0926a6;\n//   border-radius: 5px;\n//   color: black;\n//   padding: 5px 10px;\n//   text-align: center;\n//   text-decoration: none;\n//   display: inline-block;\n//   font-size: 14px;\n//   cursor: pointer;\n// `;\n\nconst ErrorText = styled.p`\ncolor: red;\nfont-size: 14px`\n\nexport const FormErr = ({ name })=> {\n  return (\n    <ErrorMessage name={name}\n      render={message => <ErrorText>{message}</ErrorText>}/>\n  )\n}\n  ","import PropTypes from 'prop-types';\nimport { Formik} from 'formik';\nimport * as yup from 'yup';\nimport { Button, FormLabel, FormErr,Label, Input } from './FormContacts.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().min(9).max(9).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst FormContacts = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n    console.log(values);\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      alert(`${name} is already in contacts`);\n      return;\n    } else if (contacts.find(contact => contact.number === number)) {\n      alert(`${number} is already in contacts`);\n      return;\n    }\n    dispatch(addContact(values));\n\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormLabel autoComplete=\"off\">\n        <Label htmlFor=\"name\">\n          Name\n          <Input type=\"text\" name=\"name\" />\n          <FormErr name=\"name\" />\n        </Label>\n        <Label htmlFor=\"number\">\n          Number\n          <Input type=\"tel\" name=\"number\" />\n          <FormErr name=\"number\" />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </FormLabel>\n    </Formik>\n  );\n};\n\nFormContacts.propTypes = {\n  initialValues: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  validationSchema: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default FormContacts;\n","import styled from 'styled-components';\nexport const LabelTitle= styled.label`\n  color: black;\n  font-size: 25px;\n  text-align:center\n`;\n\n\nexport const Input = styled.input`\n  width: 220px;\n  padding: 5px;\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid green;\n\n  box-shadow: 0px 1px 1px blue, 0px 1px 1px blue,\n    0px 1px 1px blue;\n  outline: none;\n`;","\nimport { LabelTitle, Input } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\n\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(getFilter);\n  const handelFilter = (e) => {\n    const searchContact = e.currentTarget.value\n    dispatch(setFilter(searchContact))\n       \n   }\n\n  return (\n    <>\n      <LabelTitle>\n        Find contacts by name\n        <Input type=\"text\" name=\"filter\" onChange={handelFilter} value={value}></Input>\n      </LabelTitle>\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Description = styled.p`\n  // margin-left: 50px;\n  margin-right: auto;\n`;\nexport const Button = styled.button`\n  margin-top: 20px;\n  color: snow;\n  text-shadow: darkslateblue 1px 1px 1px;\n  width: 80px;\n  line-height: 1.5rem;\n  background: blue;\n  border: none;\n  border-radius: 7px;\n  box-shadow: 0px 1px 1px blue, 0px 1px 1px green, 0px 1px 1px blue;\n  cursor: pointer;\n  transition: all 150ms ease 0s;\n  &:hover,\n  &:focus {\n    background: green;\n    box-shadow: 2px 5px 5px darkorchid;\n  }\n`;\n","import { Description, Button } from '../Contact/Contact.styled';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(contact.id));\n  return (\n    <>\n      <Description>{contact.name}</Description>\n      <Description>{contact.number}</Description>\n\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </>\n  );\n};\nContact.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Contact;\n","import styled from 'styled-components';\n\n// export const List = styled.ul`\n\n//    margin: 0;\n//   padding: 10;\n//   display: flex;\n//   flex-direction:column;\n//   gap: 8px;\n// `;\n\n\n// export const ListItem  = styled.li`\n//   display: flex;\n//   justify-content: space-around;\n//   align-items: center;\n//     padding: 5px;\n//   margin-bottom: 8px;\n// `;\n\nexport const List = styled.ul`\n  margin-top: 16px;\n  margin-left: 40px;\n  margin-right: 40px;\n \n\n  \n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  &:not(:last-child) {\n    margin-bottom: 12px;\n  }\n`;\n\n// export const MainContainer = styled.div`\n//   display: flex;\n//   width: 650px;\n//   justify-content: space-between;\n// `;\n\nexport const Contain = styled.div`\n  width: 720px;\n  padding: 35px 15px;\n  margin-top: 20px;\n  border: 2px solid black;\n  border-radius: 10px;\n  text-align: center;\n  margin-left: auto;\n  margin-right: auto;\n`;","import Contact from 'components/Contact/Contact';\nimport { useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\nimport { List, ListItem } from './ContactList.styled';\n\nconst filterContacts = (items, filter) =>\n  items.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\n\nconst ContactList = () => {\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = filterContacts(items, filter);\n\n  return (\n    <>\n    <List>\n      {visibleContacts.map((item, id) => (\n        <ListItem key={id}>\n          <Contact contact={item} />\n        </ListItem>\n      ))}\n      </List>\n      </>\n  );\n};\n\nexport default ContactList;\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { getIsLoading, getError } from \"redux/contacts/selectors\";\nimport FormContacts from \"components/FormContacts/FormContacts\";\nimport Filter from \"components/Filter/Filter\";\nimport ContactList from \"components/ContactList/ContactList\";\nimport { Contain } from \"components/ContactList/ContactList.styled\";\n\n const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Contain>\n      <h1>Phonebook</h1>\n      <FormContacts />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </Contain>\n  );\n};\nexport default Contacts;"],"names":["getContacts","state","contacts","items","getFilter","filter","getIsLoading","isLoading","getError","error","Label","styled","Input","Field","Button","FormLabel","Form","ErrorText","FormErr","name","render","message","schema","yup","shape","required","number","min","max","initialValues","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","console","log","find","contact","toLowerCase","alert","addContact","autoComplete","htmlFor","type","LabelTitle","value","onChange","e","searchContact","currentTarget","setFilter","Description","onClick","deleteContact","id","List","ListItem","Contain","visibleContacts","item","includes","filterContacts","map","useEffect","fetchContacts"],"sourceRoot":""}